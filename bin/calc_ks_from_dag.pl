#!/usr/bin/env perl

# Program: calc_ks_from_dag.pl
# Program description: see usage message.
# Steven Cannon 2023

use strict;
use warnings;
use vars qw($CODONSIZE $KS_CUTOFF $KA_CUTOFF);
use Bio::DB::Fasta;
use Bio::SeqIO;
use Bio::AlignIO;
use Bio::LocatableSeq;
use Bio::SimpleAlign;
use Bio::Tools::Run::Alignment::Clustalw;
use Bio::Tools::CodonTable;
use Bio::Align::DNAStatistics;
use Bio::Tools::Run::Phylo::PAML::Codeml;
use Bio::Tools::Run::Phylo::PAML::Yn00;
use DB_File;
use Getopt::Long;
use File::Basename;
use Cwd qw();
use feature "say";
#use Data::Dumper;
#use Carp;

my $scriptname = basename($0);

my $usage = <<EOS;
  Usage: cat FILE.aligncoords | $scriptname -fasta_db <dir_with_fasta.db> -match_table FILE.db -report_out FILE [options]
  
  Calculates Ks for genes in DAGchainer synteny gene pairs.
  
  Required:
    [on STDIN]      Input from an .aligncoords file, from DAGchainer
    -fasta_db       Path to directory with Bio::DB::Fasta Berkeleydb file with CDS sequence containing genes from FILE.aligncoords
    -report_out     Filename for output report
                      Synteny-block header lines with the form:
                        ## alignment chrA vs. chrB Alignment #1  score = 183.0 (num aligned pairs: 6):
                      Data lines with the form:
                        IDchrA idA start stop IDchrB idB start stop Eval score

  Required if -align_method is "precalc":
    -match_table    Name of berkeleydb file with alternating qry sbj and alignment data.
                      This is derived from BLAST -m8 format, generated by mmseqs easy-search with --format-output
                      "query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qaln,taln"
                      In the berkeleydb, the key is comprised of \"query target\"
                      and the remaining columns become columns 0-11 in the value record.
  Options:
    -align_out      Name for optional CDS alignment file, e.g. chrA.chrB.outcds
    -align_method   Method for generating protein alignments. Options: clustalw, precalc [precalc]
    -help           See this information
    -verbose        Run in verbose mode
EOS

my ($CODONSIZE, $KA_CUTOFF, $KS_CUTOFF, $frame, $codontable, $verbose) = (3, 4, 4, 0, 1, 0);
my ($fasta_db, $chrA_fas, $chrB_fas, $report_out, $align_out, $match_table, $help);
my $align_method = "precalc";
my $working_dir = Cwd::abs_path();

GetOptions( 
  'report_out=s'   => \$report_out,  # required
  'fasta_db=s'     => \$fasta_db,    # required
  'match_table:s'  => \$match_table, # required if align_method is "precalc"
  'align_out:s'    => \$align_out,
  'help'           => \$help,
  'align_method:s' => \$align_method,
  'verbose+'       => \$verbose,
);

if ($help) { die "\n$usage" }
if (not defined($report_out)) { die "\n  -report_out is required. See -help for guidance.\n\n" }
if (not defined($fasta_db)) { die "\nPlease provide a berkeleydb file with sequence data. See -help for guidance.\n\n" }
if ($align_method =~ /precalc/ && not defined($match_table)){ 
  die "\n  -match_table must be provided if -align_method is \"precalc\"\n\n";
}

my %match_table_hsh;

my $align_engine;
if ($align_method =~ /clustalw/i){
  $align_engine = Bio::Tools::Run::Alignment::Clustalw->new('ktuple' => 2, 'matrix' => 'BLOSUM');
}
elsif ($align_method =~ /precalc/i){
  # Don't assign $align_engine. We'll use the provided alignment in the berkekeydb file
  tie %match_table_hsh, 'DB_File', $match_table, O_RDWR|O_CREAT, 0666, $DB_HASH 
    or die "Cannot open match_table $match_table: $!\n";
}
else {
  die "Alignment method is not recognized. Available methods: clustalw, precalc";
}

##################################################
# Tie to a berkeleydb file with fasta sequence

tie my %seq_hsh, 'Bio::DB::Fasta', $fasta_db;

##################################################
# Process the DAGchainer output (FILE.aligncoords) 
open (my $RPTOUT, "> $report_out") or die "cannot open out $report_out $!";

say "  == Calculating Ks with alignments from $match_table";

my $align_obj;
if ($align_out) { $align_obj = new Bio::AlignIO('-format' => "fasta", '-file' => ">$align_out") }

my $table = new Bio::Tools::CodonTable();

my $count = 0;
my $dag_header = "nullstring";
my @dag_header_bits;
my (@out_KaKs_ary_all, $out_KaKs_aryref_all);
my (@out_Ka_ary, @out_Ks_ary, @out_KaKs_ary, $out_Ka_aryref, $out_Ks_aryref, $out_KaKs_aryref);
my (%out_KaKsSum_hsh, $out_KaKsSum_hshref);
my ($dag_startA, $dag_stopA, $dag_startB, $dag_stopB) = (999999999999999999,0,999999999999999999,0);

while (my $thisline = <>) {
  chomp $thisline;
  #say $thisline;
  
  if ($thisline =~ /^#/) {
    if ($verbose){ say "\nAA: line $. header: $thisline"; }
    # looks like:
    #   ## alignment Medicago.pan2.chr1 vs. cerca.ISC453364.gnm3.Chr01 Alignment #1  score = 22213.0 (num aligned pairs: 512):
    # NOTE: DAGChainer sorts the query and subject lexically, putting upper case before lower.
    # Process and print summary header lines from previous DAGchainer block
    my ($ave_Ka, $ave_Ks, $ave_KaKs, $median_Ka, $median_Ks, $median_KaKs);
    if ($count > 0) { # means $ave_Ka, $ave_Ks were calculable, so $count incremented; prepare for printing.
      $ave_Ka =   sprintf ("%.4f", ($out_KaKsSum_hshref->{"sum_Ka"})/$count );
      $ave_Ks =   sprintf ("%.4f", ($out_KaKsSum_hshref->{"sum_Ks"})/$count );
      $ave_KaKs = sprintf ("%.4f", ($out_KaKsSum_hshref->{"sum_KaKs"})/$count );
      
      $median_Ka =   sprintf ("%.4f", calc_median(\@$out_Ka_aryref));
      $median_Ks =   sprintf ("%.4f", calc_median(\@$out_Ks_aryref));
      $median_KaKs =   sprintf ("%.4f", calc_median(\@$out_KaKs_aryref));
    }
    else { # means $ave_Ka, $ave_Ks weren't calculable, so $count didn't increment. Flag with 999s.  
      ($ave_Ka, $ave_Ks, $ave_KaKs, $median_Ka, $median_Ks, $median_KaKs) = (999, 999, 999, 999, 999, 999);
    }
    
    my ($chrA, $chrB, $diag_orient, $diag_num, $diag_score, $diag_ct) = @dag_header_bits;
    # GFF:  seqid  source  type  start  end  score  strand  phase  attributes
    unless ($dag_header eq "nullstring") {
      say $RPTOUT "$dag_header"; 
      say $RPTOUT  "##GFF_A\t$chrA\tDAGchainer\tsynteny\t$dag_startA\t$dag_stopA\t$diag_score\t$diag_orient\t." . 
                       "\tID=$chrA.$chrB.$diag_num.$diag_orient;median_Ks=$median_Ks;ave_Ks=$ave_Ks;matches=$chrB:$dag_startB..$dag_stopB";
      say $RPTOUT  "##GFF_B\t$chrB\tDAGchainer\tsynteny\t$dag_startB\t$dag_stopB\t$diag_score\t$diag_orient\t." .
                       "\tID=$chrB.$chrA.$diag_num.$diag_orient;median_Ks=$median_Ks;ave_Ks=$ave_Ks;matches=$chrA:$dag_startA..$dag_stopA";
      say $RPTOUT  "#%SUM\tcount\tdag_startA\tdag_stopA\tdag_startB\tdag_stopB\t" . 
                       "ave_Ka\tave_Ks\tave_KaKs\tmedian_Ka\tmedian_Ks\tmedian_KaKs";
      say $RPTOUT  "##SUM\t$count\t$dag_startA\t$dag_stopA\t$dag_startB\t$dag_stopB\t" . 
                       "$ave_Ka\t$ave_Ks\t$ave_KaKs\t$median_Ka\t$median_Ks\t$median_KaKs";
      say $RPTOUT  "#%DATA\tA_id\tB_id\taln_len\tKa\tKs\tKaKs\tblock_Ks";
    }

    # Print a line for each gene-pair-data-line from the aligncoords file. 
    # At the end of each line, add median_Ks for the block, to allow filtering in post-processing.
    foreach my $data_line (@$out_KaKs_aryref_all){ 
      say $RPTOUT  "$data_line\t$median_Ks";
    }
    
    $out_KaKsSum_hshref->{"sum_Ka"} = 0;
    $out_KaKsSum_hshref->{"sum_Ks"} = 0;
    $out_KaKsSum_hshref->{"sum_KaKs"} = 0;
    
    @$out_KaKs_aryref = ();
    @$out_Ka_aryref = ();
    @$out_Ks_aryref = ();
    @$out_KaKs_aryref_all = ();
    
    $count = 0;
    ($dag_startA, $dag_stopA, $dag_startB, $dag_stopB) = (999999999999999999,0,999999999999999999,0);
    
    # DAG headers look like one of the two following:
    ## alignment Gm10 vs. Gm20 (reverse) Alignment #3  score = 348.9 (num aligned pairs: 10):
    ## alignment Gm10 vs. Gm20 Alignment #3  score = 1458.8 (num aligned pairs: 32):
    
    $dag_header = $thisline;
    if ($dag_header =~ /reverse/) { $diag_orient = "-" } else { $diag_orient = "+" }
    $dag_header =~ /alignment ([^ ]+) vs. ([^ ]+) .*Alignment #(\d+) +score = (\d+.\d+) .num aligned pairs: (\d+).:/;
    ($chrA, $chrB, $diag_num, $diag_score, $diag_ct) = ($1, $2, "$3", $4, $5);
    @dag_header_bits = ($chrA, $chrB, $diag_orient, $diag_num, $diag_score, $diag_ct);
    
    next
  }
  else { # Process data line and print Ka and Ks results.
    if ($verbose){ say "\nBB: line $. data: $thisline"; }
    # NOTE: DAGChainer sorts the query and subject lexically, putting upper case before lower.
    
    my ($IDchrA, $idA, $startA, $stopA, $IDchrB, $idB, $startB, $stopB, $Eval) = split /\s+/, $thisline;
  
    $dag_startA = $startA unless ($dag_startA < $startA);
    $dag_stopA  = $stopA unless  ($dag_stopA >  $stopA);    
    $dag_startB = $startB unless ($dag_startB < $startB);
    $dag_stopB  = $stopB unless  ($dag_stopB >  $stopB);    
    
    if ($verbose>1) {
      say "\ncount:\t$count";
      say "\tIDchrA\t[idA]\tstartA\t[Aseq]";
      say "\t$IDchrA, [$idA], $startA, [$seq_hsh{$idA}]";
      say "\tIDchrB\t[idB]\tstartB\t[Bseq]";
      say "\t$IDchrB, [$idB], $startB, [$seq_hsh{$idB}]";
    }
    
    my $nuc_objA = Bio::Seq->new( -display_id => $idA, -seq => $seq_hsh{$idA} );
    my $nuc_objB = Bio::Seq->new( -display_id => $idB, -seq => $seq_hsh{$idB} );

    my ($prot_objA, $prot_objB);

    $prot_objA = $nuc_objA->translate(-frame => 0, -codontable_id => $codontable);
    $prot_objB = $nuc_objB->translate(-frame => 0, -codontable_id => $codontable);
    
    if ($align_method =~ /precalc/i){ # Seqs in prot aligns may be truncated/partial. Adjust prot and nucl seqs.
      # say "WW: idA.x.idB: [$idA.x.$idB]";
      unless (defined $idA){
        say "WARNING: undefined idA; skipping. Line was parsed as\n" .
          "  $IDchrA, $idA, $startA, $stopA, $IDchrB, $idB, $startB, $stopB, $Eval\n";
        next;
      }
      unless (defined $idB){
        say "WARNING: undefined idB; skipping. Line was parsed as\n" .
          "  $IDchrA, $idA, $startA, $stopA, $IDchrB, $idB, $startB, $stopB, $Eval\n";
        next;
      }

      my @fields = split(/\s/, $match_table_hsh{"$idA $idB"});
      if (scalar(@fields)<=1){
        warn "WARNING: In data line \n$thisline\n" .
             "parsed as \n$IDchrA, $idA, $startA, $stopA, $IDchrB, $idB, $startB, $stopB, $Eval\n" .
             "No match for key \"$idA $idB\".\n" .
             "Are the identifiers in lexical order, to match the order in the DAGChainer coords file?\n";
        next;
      }

      #say "CC: ", join "][", @fields, "]\n";
        # qry   sbj   fident  alnlen  mismatch  gapopen  qstart  qend  tstart  tend  evalue  bits  qaln  taln
        # k0    k1    v0      v1      v2        v3       v4      v5    v6      v7    v8      v9    v10   v11
      my ($protA_start, $protA_end, $protA_aln) = ($fields[4], $fields[5], $fields[10]);
      my ($protB_start, $protB_end, $protB_aln) = ($fields[6], $fields[7], $fields[11]);
      
      #say "DD: $protA_start\t$protA_end\t$protA_aln";
      #say "DD: $protB_start\t$protB_end\t$protB_aln";
      
      my ($nucA_adj, $nuc_objA_adj);
      eval {
        $nucA_adj = $nuc_objA->subseq(3*($protA_start-1)+1, 3*($protA_end));
        $nuc_objA_adj = Bio::Seq->new( -display_id => $idA, -seq => $nucA_adj );
      };
      if ($@) {
        say "ABORTED from calculating ka & ks for $idA and $idB, input line $.\n  Error: $@\n";
        next;
      }

      my ($nucB_adj, $nuc_objB_adj);
      eval {
        $nucB_adj = $nuc_objB->subseq(3*($protB_start-1)+1, 3*($protB_end));
        $nuc_objB_adj = Bio::Seq->new( -display_id => $idB, -seq => $nucB_adj );
      };
      if ($@) {
        say "ABORTED from calculating ka & ks for $idA and $idB, input line $.\n  Error: $@\n";
        next;
      }

      my $lenA = $nuc_objA->length;
      my $lenB = $nuc_objB->length;
      # say join("\t", "EE:", $nuc_objA->length, $nuc_objA_adj->length);
      # say "EE:\t", $nuc_objA->seq;
      # say "EE:\t", $nuc_objA_adj->seq;
      # say join("\t", "EE:", $nuc_objB->length, $nuc_objB_adj->length);
      # say "EE:\t", $nuc_objB->seq;
      # say "EE:\t", $nuc_objB_adj->seq;
      $prot_objA = Bio::Seq->new( -display_id => $idA, -seq => $protA_aln );
      $prot_objB = Bio::Seq->new( -display_id => $idB, -seq => $protB_aln );
      ($nuc_objA, $nuc_objB) = ($nuc_objA_adj, $nuc_objB_adj);
    }
    else { # $align_method is clustalw. Don't adjust sequence boundaries.
    }
   
    ## Align sequences
    my $dna_aln;
    eval {
      if ($verbose) { say "ALIGNING $idA and $idB (nuc_objA, nuc_objB, prot_objA, prot_objB)"; }
      $dna_aln = align_pair($nuc_objA, $nuc_objB, $prot_objA, $prot_objB);
    }; 
    warn $@ if $@;
    
    ## Calculate and report Ka and Ks
    eval {
      local $SIG{ALRM} = sub {
        die "ABORTED from calculating ka & ks for $idA and $idB due to timeout";
      };
      $count++;
      if ($verbose) { say "CALCULATING KA & KS for $idA and $idB"; }
      alarm 2;
      ($out_KaKs_aryref_all, $out_KaKsSum_hshref, $out_Ka_aryref, $out_Ks_aryref, $out_KaKs_aryref, $count) = 
        KaKs_report($dna_aln, $nuc_objA, $nuc_objB, $count);
      alarm 0;
    }; 
    warn $@ if $@;
  }
}

# flush last results
say $RPTOUT "$dag_header"; 

my ($ave_Ka, $ave_Ks, $ave_KaKs, $median_Ka, $median_Ks, $median_KaKs);
if ($count > 0) { # means $ave_Ka, $ave_Ks were calculable, so $count incremented; prepare for printing.
  $ave_Ka =   sprintf ("%.4f", ($out_KaKsSum_hshref->{"sum_Ka"})/$count );
  $ave_Ks =   sprintf ("%.4f", ($out_KaKsSum_hshref->{"sum_Ks"})/$count );
  $ave_KaKs = sprintf ("%.4f", ($out_KaKsSum_hshref->{"sum_KaKs"})/$count );
  
  $median_Ka =   sprintf ("%.4f", calc_median(\@$out_Ka_aryref));
  $median_Ks =   sprintf ("%.4f", calc_median(\@$out_Ks_aryref));
  $median_KaKs = sprintf ("%.4f", calc_median(\@$out_KaKs_aryref));
}
else { # means $ave_Ka, $ave_Ks weren't calculable, so $count didn't increment. Flag with 999s.  
  ($ave_Ka, $ave_Ks, $ave_KaKs, $median_Ka, $median_Ks, $median_KaKs) = (999, 999, 999, 999, 999, 999);
}

my ($chrA, $chrB, $diag_orient, $diag_num, $diag_score, $diag_ct) = @dag_header_bits;
# GFF:  seqid  source  type  start  end  score  strand  phase  attributes
say $RPTOUT  "##GFF_A\t$chrA\tDAGchainer\tsynteny\t$dag_startA\t$dag_stopA\t$diag_score\t$diag_orient\t." . 
                 "\tID=$chrA.$chrB.$diag_num.$diag_orient;median_Ks=$median_Ks;ave_Ks=$ave_Ks;matches=$chrB:$dag_startB..$dag_stopB";
say $RPTOUT  "##GFF_B\t$chrB\tDAGchainer\tsynteny\t$dag_startB\t$dag_stopB\t$diag_score\t$diag_orient\t." .
                 "\tID=$chrB.$chrA.$diag_num.$diag_orient;median_Ks=$median_Ks;ave_Ks=$ave_Ks;matches=$chrA:$dag_startA..$dag_stopA";
say $RPTOUT  "#%SUM\tcount\tdag_startA\tdag_stopA\tdag_startB\tdag_stopB\t" . 
                 "ave_Ka\tave_Ks\tave_KaKs\tmedian_Ka\tmedian_Ks\tmedian_KaKs";
say $RPTOUT  "##SUM\t$count\t$dag_startA\t$dag_stopA\t$dag_startB\t$dag_stopB\t" . 
                 "$ave_Ka\t$ave_Ks\t$ave_KaKs\t$median_Ka\t$median_Ks\t$median_KaKs";
say $RPTOUT  "#%DATA\tA_id\tB_id\taln_len\tKa\tKs\tKaKs\tblock_Ks";

# Print a line for each gene-pair-data-line from the aligncoords file. 
# At the end of each line, add median_Ks for the block, to allow filtering in post-processing.
foreach my $data_line (@$out_KaKs_aryref_all){ 
  say $RPTOUT  "$data_line\t$median_Ks"; 
}

say "  == FINISHED calculating Ks with alignments from $match_table";

####################################################################################################
######### subroutines ##############################################################################

sub align_pair {
  my ($nuc_objA, $nuc_objB, $prot_objA, $prot_objB) = @_;

  local $SIG{__WARN__} = sub { };

  my @nucpair = ($nuc_objA, $nuc_objB);
  my @protpair = ($prot_objA, $prot_objB);
      
  my $aa_aln_obj;
  if ( $align_method =~ /clustalw/i ){
    $aa_aln_obj = $align_engine->align(\@protpair);
  }
  else { # $align_method is precalc
    $aa_aln_obj = new Bio::SimpleAlign;
    my $A_loc_prot_obj = new Bio::LocatableSeq(
                 -display_id  => $prot_objA->id,
                 -start => 1,
                 -end   => $prot_objA->length,
                 -seq   => $prot_objA->seq,
        );
    my $B_loc_prot_obj = new Bio::LocatableSeq(
                 -display_id  => $prot_objB->id,
                 -start => 1,
                 -end   => ($prot_objB->length),
                 -seq   => $prot_objB->seq,
        );
    $aa_aln_obj->add_seq($A_loc_prot_obj);
    $aa_aln_obj->add_seq($B_loc_prot_obj);
  }
  
  my $dna_aln = new Bio::SimpleAlign;
  my $seqorder = 0;
  my $aa_aln_obj_len = $aa_aln_obj->length;
  foreach my $seq ( $aa_aln_obj->each_seq ) {    
    my $newseq;
    
    foreach my $pos ( 1..$aa_aln_obj_len ) { 
      my $loc = $seq->location_from_column($pos);
      my $dna = ''; 
      if( !defined $loc || $loc->location_type ne 'EXACT' ) {
        $dna = '---';
      } 
      else {
        my $aa_start = $loc->start;
        my $aa_end = $loc->end;
        
        # to readjust to codon boundaries, end needs to be +1 so we can just multiply by CODONSIZE to get this:
        my $nt_start = (($aa_start - 1)*$CODONSIZE) +1;
        my $nt_end = ($aa_end)*$CODONSIZE;
        
        if ( $nt_start <=0 || $nt_end > $nuc_objB->length() ) {
          if ( $verbose>1 ) {
              say "\tcodons don't match for ($aa_start,$aa_end) ($nt_start,$nt_end)";
          }
          $dna = '---';
        } 
        else {
            $dna = $nucpair[$seqorder]->subseq($nt_start,$nt_end);
        }
      }
      $newseq .= $dna;
    }
    $seqorder++;
    
    # Readjust to codon boundaries (note sequences start with 1)
    #say "GG: $newseq";
    my $new_dna = new Bio::LocatableSeq(
                 -display_id  => $seq->id(),
                 -start => (($seq->start - 1) * $CODONSIZE) + 1, 
                 -end   => ($seq->end * $CODONSIZE),
                 -strand => $seq->strand,
                 -seq   => $newseq
         );
                     
    $dna_aln->add_seq($new_dna);
  }
  #say "GG ";
  
  if ($verbose) { say "WRITING $dna_aln" }
  if ($align_out) { $align_obj->write_aln($dna_aln) }
  
  return $dna_aln;
}

sub KaKs_report {
  my ($dna_aln, $nuc_objA, $nuc_objB, $count) = @_;
  #say "BB: $dna_aln, $nuc_objA, $nuc_objB, $count";
  
  # accumulate string for the report
  my $A_id = $nuc_objA->display_id;
  my $B_id = $nuc_objB->display_id;
  my $aln_len = $dna_aln->length;
  #say "CC: $A_id $B_id $aln_len";

  my $min_align_len = 30;
  if ($aln_len<$min_align_len){
    say "Alignment length is $aln_len; skipping because less than $min_align_len";
    next;
  }

  my ($kaks_factory, $Ka, $Ks, $KaKs);
  
  # Use codeml method (yn00 is't handled in this script yet; probably no reason to.)

  $kaks_factory = Bio::Tools::Run::Phylo::PAML::Codeml->new(-params => { 'runmode' => -2, 'seqtype' => 1 } );
  $kaks_factory->alignment($dna_aln);
  my ($rc, $parser) = $kaks_factory->run();
  my $result = $parser->next_result;
  if ($verbose > 1) { print "HERE2: Parsing on obj [$result]\n" } # We aren't seeing this.
  my $MLmatrix = $result->get_MLmatrix();
  
  $Ka = $MLmatrix->[0]->[1]->{'dN'};
  $Ks = $MLmatrix->[0]->[1]->{'dS'};
  $KaKs = $MLmatrix->[0]->[1]->{'omega'};
  #say "DD: $A_id\t$B_id\t$aln_len\t$Ka\t$Ks\t$KaKs\n";

  if ($Ka < $KA_CUTOFF) {
    $out_KaKsSum_hsh{"sum_Ka"} += $Ka;
    push @out_Ka_ary, $Ka;
  }
  if ($Ks < $KS_CUTOFF) {
    $out_KaKsSum_hsh{"sum_Ks"} += $Ks;
    push @out_Ks_ary, $Ks;
  }
  if ($Ka < $KA_CUTOFF and $Ks < $KS_CUTOFF) {
    $out_KaKsSum_hsh{"sum_KaKs"} += $KaKs;
    push @out_KaKs_ary, $KaKs;
  }
  if ($Ka >= $KA_CUTOFF or $Ks >= $KS_CUTOFF) {
    $count--; # high Ks isn't included in out_KaKsSum_hsh, so de-increment
  }
  
  push @out_KaKs_ary_all, "\t$A_id\t$B_id\t$aln_len\t$Ka\t$Ks\t$KaKs";
  # say "EE: \t$A_id\t$B_id\t$aln_len\t$Ka\t$Ks\t$KaKs";
  
  return (\@out_KaKs_ary_all, \%out_KaKsSum_hsh, \@out_Ka_ary, \@out_Ks_ary, \@out_KaKs_ary, $count);
}

# Return median value for an array of numbers
# See http://stackoverflow.com/questions/5119034/using-perl-to-find-median-mode-standard-deviation
sub calc_median {
  my ($array_ref) = @_;
  my @values = @$array_ref;
  my $median;
  my $mid = int((scalar @values)/2);
  my $len = scalar(@values);
  my @sorted_values = sort {$a <=> $b} @values;
  #say Dumper(@sorted_values);
  if (@values % 2) {
    $median = $sorted_values[ $mid ];
  } else {
    $median = ($sorted_values[$mid-1] + $sorted_values[$mid])/2;
  }
  #say "FF: Median is $median";
  return $median;
}

__END__

Versions
2023-08-07 Initial, based on older dag_ks.pl script.
2023-08-26 Tweak help text: STDIN --> ARGV
2023-09-08 Add "precalc" to take in precomputed alignment from mmseqs, rather than using clustalw 
2023-09-18 Add warning for undefined keys in match_table_hsh
2023-10-11 Implement berkeleydb for the large match tables (for precalc method)
2023-11-25 Check for lexical ordering of query & subject in key, for precalc method, for consistency with DAGChainer
2023-11-30 Load fasta sequence into a berkeleydb file. Take .aligncoords in via STDIN.
2023-12-05 Set $min_align_len. More debugging output. Attempt to catch and kill long-running KaKs_reports.
2023-12-06 Catch and report errors around subseq (e.g. for cases where a sequence isn't found)
